-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity UALBuffers is
port (
	clk : in std_logic;
    reset : in std_logic;
    buff_A_in : in std_logic_vector(3 downto 0);
    buff_B_in : in std_logic_vector(3 downto 0);
    mem_1_in : in std_logic_vector(7 downto 0);
    mem_2_in : in std_logic_vector(7 downto 0);
    buff_SR_IN_L_in : in std_logic;
    buff_SR_IN_R_in : in std_logic;
    CE_buff_A : in std_logic; --CE = cheap enabler = signal d'activation des buffers
    CE_buff_B : in std_logic;
    CE_mem_1 : in std_logic;
    CE_mem_2 : in std_logic;
    CE_SR_IN_L : in std_logic;
    CE_SR_IN_R : in std_logic;
    buff_A_out : out  std_logic_vector(3 downto 0);
    buff_B_out : out  std_logic_vector(3 downto 0);
    mem_1_out : out  std_logic_vector(7 downto 0);
    mem_2_out : out  std_logic_vector(7 downto 0);
    buff_SR_IN_L_out : out std_logic;
    buff_SR_IN_R_out : out std_logic 
    
);
end UALBuffers;


architecture UALBuffers_Arch of UALBuffers is

begin

	buff_A_Proc : process (reset, clk, CE_buff_A)
    begin
    	if reset = '1' then
        	buff_A_out <= (others => '0');
        elsif(rising_edge(clk) and CE_buff_A = '1') then
        	buff_A_out <= buff_A_in;
        end if;
    end process;

	buff_B_Proc : process (reset, clk, CE_buff_B)
    begin
    	if reset = '1' then
        	buff_B_out <= (others => '0');
        elsif(rising_edge(clk) and CE_buff_B = '1') then
        	buff_B_out <= buff_B_in;
        end if;
    end process;

	buff_SR_IN_L_Proc : process (reset, clk, CE_SR_IN_L)
    begin
    	if reset = '1' then
        	buff_SR_IN_L_out <= '0';
        elsif(rising_edge(clk) and CE_SR_IN_L = '1') then
        	buff_SR_IN_L_out <= buff_SR_IN_L_in;
        end if;
    end process;
    
    buff_SR_IN_R_Proc : process (reset, clk, CE_SR_IN_R)
    begin
    	if reset = '1' then
        	buff_SR_IN_R_out <= '0';
        elsif(rising_edge(clk) and CE_SR_IN_R = '1') then
        	buff_SR_IN_R_out <= buff_SR_IN_R_in;
        end if;
    end process;
    
    buff_mem_1_Proc : process (reset, clk, CE_mem_1)
    begin
    	if reset = '1' then
        	mem_1_out <= (others => '0');
        elsif(rising_edge(clk) and CE_mem_1 = '1') then
        	mem_1_out <= mem_1_in;
        end if;
    end process;
    
    
    buff_mem_2_Proc : process (reset, clk, CE_mem_2)
    begin
    	if reset = '1' then
        	mem_2_out <= (others => '0');
        elsif(rising_edge(clk) and CE_mem_2 = '1') then
        	mem_2_out <= mem_2_in;
        end if;
    end process;
    

end UALBuffers_Arch;